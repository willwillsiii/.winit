call plug#begin()
" The default plugin directory will be as follows:
"   - Vim (Linux/macOS): '~/.vim/plugged'
"   - Vim (Windows): '~/vimfiles/plugged'
"   - Neovim (Linux/macOS/Windows): stdpath('data') . '/plugged'
" You can specify a custom plugin directory by passing it as the argument
"   - e.g. `call plug#begin('~/.vim/plugged')`
"   - Avoid using standard Vim directory names like 'plugin'

" === Winit plugins ===
Plug 'romainl/Apprentice'
Plug 'willwillsiii/ayu-vim', { 'branch': 'tabline_with_original_colors' }
Plug 'sjl/badwolf'
Plug 'morhetz/gruvbox'
Plug 'nanotech/jellybeans.vim'
Plug 'altercation/vim-colors-solarized'
Plug 'atelierbram/vim-colors_atelier-schemes'
Plug 'tmhedberg/SimpylFold'
Plug 'vim-scripts/TaskList.vim'
Plug 'wincent/command-t'
Plug 'vim-scripts/indentpython.vim'
"Plug 'davidhalter/jedi-vim'
"Plug 'iamcco/markdown-preview.nvim', { 'branch': 'dependabot/npm_and_yarn/next-12.1.0' }
Plug 'preservim/nerdtree'
Plug 'PhilRunninger/nerdtree-buffer-ops'
Plug 'PhilRunninger/nerdtree-visual-selection'
Plug 'fs111/pydoc.vim'
Plug 'alfredodeza/pytest.vim'
Plug 'ervandew/supertab'
Plug 'godlygeek/tabular'
Plug 'tomtom/tlib_vim'
Plug 'edkolev/tmuxline.vim'
"Plug 'SirVer/ultisnips'
Plug 'mbbill/undotree'
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'julienr/vim-cellmode'
Plug 'tpope/vim-commentary'
Plug 'zhou13/vim-easyescape'
Plug 'nvie/vim-flake8'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-git'
"Plug 'preservim/vim-indent-guides'
Plug 'reinh/vim-makegreen'
Plug 'preservim/vim-markdown'
Plug 'weynhamz/vim-plugin-minibufexpl'
Plug 'mhinz/vim-signify'
Plug 'honza/vim-snippets'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-tbone'
Plug 'christoomey/vim-tmux-navigator'
Plug 'tpope/vim-unimpaired'
"Plug 'preservim/vimux'
" =====================

" Initialize plugin system
" - Automatically executes `filetype plugin indent on` and `syntax enable`.
call plug#end()
" You can revert the settings after the call like so:
"   filetype indent off   " Disable file-type-specific indentation
"   syntax off            " Disable syntax highlighting

" Important settings
set nocompatible
" Setting syntax might cause vim to overwrite settings.
" See: https://stackoverflow.com/questions/33380451/is-there-a-difference-between-syntax-on-and-syntax-enable-in-vimscript
if !exists(g:syntax_on)
    syntax enable
endif
" Modeline is disabled for security reasons.
" See: https://security.stackexchange.com/questions/36001/vim-modeline-vulnerabilities
set nomodeline

" Vimux
nnoremap <Leader>vp :VimuxPromptCommand<CR>
nnoremap <Leader>vl :VimuxRunLastCommand<CR>
nnoremap <Leader>vi :VimuxInspectRunner<CR>
nnoremap <Leader>vq :VimuxCloseRunner<CR>
nnoremap <Leader>vc :VimuxInterruptRunner<CR>
nnoremap <Leader>vz :VimuxZoomRunner<CR>
nnoremap <Leader>v<C-l> :VimuxClearTerminalScreen<CR>

" Command-T
let g:CommandTPreferredImplementation = 'ruby'
nmap <silent> <Leader>t <Plug>(CommandT)
nmap <silent> <Leader>b <Plug>(CommandTBuffer)
nmap <silent> <Leader>j <Plug>(CommandTJump)

" Mini Buffer Explorer
let g:miniBufExplAutoStart = 1
let g:miniBufExplBuffersNeeded = 2

" Nerdtree
nnoremap <Leader>f :NERDTreeToggle<CR>

" Undotree
nnoremap <Leader>u :UndotreeToggle<CR>

" TaskList
nmap <Leader>d <Plug>TaskList

" SuperTab
let g:SuperTabDefaultCompletionType = 'context'
let g:SuperTabContextDefaultCompletionType = '<C-X><C-O>'

" EasyEscape
let g:easyescape_chars = { ';': 1, 'l': 1 }
let g:easyescape_timeout = 2000
cnoremap ;l <ESC>
"cnoremap l; <ESC>

" Signify
nmap <Leader>gj <Plug>(signify-next-hunk)
nmap <Leader>gk <Plug>(signify-prev-hunk)
nmap <Leader>gJ 9999<Leader>gj
nmap <Leader>gK 9999<Leader>gk
nnoremap <leader>gd :SignifyDiff<cr>
nnoremap <leader>gp :SignifyHunkDiff<cr>
nnoremap <leader>gu :SignifyHunkUndo<cr>

" Vim Markdown
set conceallevel=2
let g:vim_markdown_math = 1
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_toml_frontmatter = 1
let g:vim_markdown_json_frontmatter = 1
let g:vim_markdown_strikethrough = 1
let g:vim_markdown_no_extensions_in_markdown = 1
let g:vim_markdown_autowrite = 0
let g:vim_markdown_edit_url_in = 'vsplit'

" Indent Guides
"au Filetype vim,python,sh :IndentGuidesEnable
let g:indent_guides_color_change_percent = 4
let g:indent_guides_guide_size = 2
let g:indent_guides_start_level = 1

" Jedi
let g:jedi#popup_on_dot = 0

" Pytest
let g:pytest_executable = "/home/will/.pyenv/shims/pytest"
" Invoke Pytest with :Pytest along with an argument:
"     class, method, function, file, project
" These actions can be bound like so:
" nnoremap <silent><Leader>c <ESC>:Pytest file<CR>

" Vim-cellmode
let g:cellmode_default_mappings='0'
let g:cellmode_tmux_sessionname=''
let g:cellmode_tmux_windowname=''
let g:cellmode_tmux_panenumber='0'

" Python settings for *.py files
" Some are redundant to allow changes to the general settings to not affect
" python settings. 
let g:python_recommended_style = 0
au FileType python setl
    \ tabstop=8
    \ softtabstop=4
    \ shiftwidth=4
    \ textwidth=79
    \ colorcolumn=72,+1
    \ expandtab
    \ autoindent
    \ number
    \ fileformat=unix
au FileType python nmap <buffer> <Leader>q :call flake8#Flake8()<CR>
au BufWritePost *.py call flake8#Flake8()

" TeX settings
let g:tex_flavor = 'latex'
au FileType tex setl indentexpr=

" man settings
au FileType man setl nonumber

" General settings
set encoding=utf-8
set hidden
set wildmenu
set showcmd
set ignorecase
set smartcase
set backspace=indent,eol,start
set autoindent
set nostartofline
set ruler
"set confirm
"set visualbell
"set t_vb=
"set mouse=a
"set cmdheight=2
set number
set notimeout ttimeout ttimeoutlen=200
"set pastetoggle=<C-P>
set tabstop=8
set shiftwidth=4
set softtabstop=4
set expandtab
set foldlevel=99
set wrap
set linebreak
set wildmenu
set splitbelow
set splitright
set diffopt+=vertical

" General bindings
map Y y$
nnoremap <C-J> <C-W>j
nnoremap <C-K> <C-W>k
nnoremap <C-H> <C-W>h
nnoremap <C-L> <C-W>l
nnoremap <Space> za
nnoremap <silent> vv <C-W>v

" Colors
set t_Co=256
set background=dark
let g:solarized_termcolors = 256
"let g:ayucolor = 'light'
"let g:ayucolor = 'mirage'
let g:ayucolor = 'dark'
let g:ayu_italic_comment = 0
let g:ayu_sign_contrast = 1
let g:ayu_extended_palette = 1
" vim-airline settings
"let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
"let g:airline_theme = 'ayu_light'
"let g:airline_theme = 'ayu_mirage'
let g:airline_theme = 'ayu_dark'
" Inspect $TERM instad of t_Co as it works in neovim as well
if &term =~ '256color'
    " Enable true (24-bit) colors instead of (8-bit) 256 colors.
    " :h true-color
    if has('termguicolors')
        " The next lines fix color problems when using tmux.
        " See: https://stackoverflow.com/questions/62071974/vim-termguicolors-with-xterm-true-color-still-causing-problems
        let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
        let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
        " The next line is required for most colorschemes to look nice,
        " but messes up the solarized colorscheme.
        set termguicolors
        " Packadd required here
        " See: https://github.com/Luxed/ayu-vim/issues/26
        "packadd ayu-vim
        colorscheme ayu
        "colorscheme jellybeans
        "colorscheme gruvbox
        "colorscheme badwolf
        "colorscheme apprentice
    else
        " Fallback to solarized if termguicolors can't be set.
        colorscheme solarized
    endif
else
    " Fallback to solarized if terminal isn't 256-color.
    colorscheme solarized
endif

function! SourceIfExists(file)
    if filereadable(expand(a:file))
        exe 'source' a:file
    endif
endfunction

call SourceIfExists("~/.vimrc_local")
